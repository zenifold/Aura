This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-06T19:35:50.262Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
index.html
package.json
postcss.config.cjs
README.md
src/App.jsx
src/components/AddColumnForm.jsx
src/components/AddTaskForm.jsx
src/components/ColorPicker.jsx
src/components/DroppableColumn.jsx
src/components/EditableTitle.jsx
src/components/ListView.jsx
src/components/ProjectRow.jsx
src/components/SideMenu.jsx
src/components/SortableItem.jsx
src/components/TaskDialog.jsx
src/components/TrelloClone.jsx
src/index.css
src/index.jsx
src/utils/storage.js
tailwind.config.cjs
trello-clone/.gitignore
trello-clone/eslint.config.js
trello-clone/index.html
trello-clone/package.json
trello-clone/public/vite.svg
trello-clone/README.md
trello-clone/src/App.css
trello-clone/src/App.jsx
trello-clone/src/assets/react.svg
trello-clone/src/index.css
trello-clone/src/main.jsx
trello-clone/trello-clone/.gitignore
trello-clone/trello-clone/eslint.config.js
trello-clone/trello-clone/index.html
trello-clone/trello-clone/package.json
trello-clone/trello-clone/postcss.config.js
trello-clone/trello-clone/public/vite.svg
trello-clone/trello-clone/README.md
trello-clone/trello-clone/src/App.css
trello-clone/trello-clone/src/App.jsx
trello-clone/trello-clone/src/assets/react.svg
trello-clone/trello-clone/src/index.css
trello-clone/trello-clone/src/main.jsx
trello-clone/trello-clone/tailwind.config.js
trello-clone/trello-clone/vite.config.js
trello-clone/vite.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
node_modules
build
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Trello Clone</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
    "name": "trello-clone",
    "private": true,
    "version": "0.1.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "preview": "vite preview"
    },
    "dependencies": {
        "@dnd-kit/core": "^6.1.0",
        "@dnd-kit/sortable": "^8.0.0",
        "@dnd-kit/utilities": "^3.2.2",
        "@radix-ui/react-dialog": "^1.1.2",
        "lucide-react": "^0.344.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-hotkeys-hook": "^4.6.1"
    },
    "devDependencies": {
        "@vitejs/plugin-react": "^4.2.0",
        "autoprefixer": "^10.4.20",
        "postcss": "^8.4.47",
        "tailwindcss": "^3.4.14",
        "vite": "^5.0.0"
    }
}

================
File: postcss.config.cjs
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Trello Clone

This is a simple Trello clone built with React and @dnd-kit.

## Features

- Create and delete columns
- Add and delete tasks within columns
- Edit task titles
- Drag and drop tasks between columns

## Installation

1. Clone the repository
2. Run `npm install` to install dependencies
3. Run `npm start` to start the development server

## Usage

- Click on a task title to edit it
- Drag and drop tasks between columns
- Use the forms at the bottom of each column to add new tasks
- Use the form at the bottom of the board to add new columns

================
File: src/App.jsx
================
import React from 'react';
import TrelloClone from './components/TrelloClone';

function App() {
  return (
    <div className="min-h-screen bg-gray-100">
      <TrelloClone />
    </div>
  );
}

export default App;

================
File: src/components/AddColumnForm.jsx
================
import React, { useState } from 'react';

const AddColumnForm = ({ onAdd }) => {
  const [title, setTitle] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (title.trim()) {
      onAdd(title.trim());
      setTitle('');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Enter column title..."
        className="w-full p-2 rounded border"
        autoFocus
      />
      <div className="flex gap-2 mt-2">
        <button
          type="submit"
          className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Add
        </button>
      </div>
    </form>
  );
};

export default AddColumnForm;

================
File: src/components/AddTaskForm.jsx
================
import React, { useState } from 'react';
import { Plus } from 'lucide-react';

const AddTaskForm = ({ onAdd }) => {
  const [title, setTitle] = useState('');
  const [isAdding, setIsAdding] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (title.trim()) {
      onAdd(title.trim());
      setTitle('');
      setIsAdding(false);
    }
  };

  if (!isAdding) {
    return (
      <button
        onClick={() => setIsAdding(true)}
        className="mt-2 w-full p-2 text-gray-600 hover:bg-gray-300 rounded flex items-center gap-2"
      >
        <Plus size={20} />
        Add Task
      </button>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="mt-2">
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Enter task title..."
        className="w-full p-2 rounded border"
        autoFocus
      />
      <div className="flex gap-2 mt-2">
        <button
          type="submit"
          className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Add
        </button>
        <button
          type="button"
          onClick={() => setIsAdding(false)}
          className="px-3 py-1 bg-gray-300 rounded hover:bg-gray-400"
        >
          Cancel
        </button>
      </div>
    </form>
  );
};

export default AddTaskForm;

================
File: src/components/ColorPicker.jsx
================
import React from 'react';
import { Check, X } from 'lucide-react';

const colors = [
  { name: 'slate', bg: 'bg-slate-500', text: 'text-slate-500', light: 'bg-slate-100', lightText: 'text-slate-800' },
  { name: 'gray', bg: 'bg-gray-500', text: 'text-gray-500', light: 'bg-gray-100', lightText: 'text-gray-800' },
  { name: 'red', bg: 'bg-red-500', text: 'text-red-500', light: 'bg-red-100', lightText: 'text-red-800' },
  { name: 'orange', bg: 'bg-orange-500', text: 'text-orange-500', light: 'bg-orange-100', lightText: 'text-orange-800' },
  { name: 'amber', bg: 'bg-amber-500', text: 'text-amber-500', light: 'bg-amber-100', lightText: 'text-amber-800' },
  { name: 'yellow', bg: 'bg-yellow-500', text: 'text-yellow-500', light: 'bg-yellow-100', lightText: 'text-yellow-800' },
  { name: 'green', bg: 'bg-green-500', text: 'text-green-500', light: 'bg-green-100', lightText: 'text-green-800' },
  { name: 'emerald', bg: 'bg-emerald-500', text: 'text-emerald-500', light: 'bg-emerald-100', lightText: 'text-emerald-800' },
  { name: 'teal', bg: 'bg-teal-500', text: 'text-teal-500', light: 'bg-teal-100', lightText: 'text-teal-800' },
  { name: 'cyan', bg: 'bg-cyan-500', text: 'text-cyan-500', light: 'bg-cyan-100', lightText: 'text-cyan-800' },
  { name: 'sky', bg: 'bg-sky-500', text: 'text-sky-500', light: 'bg-sky-100', lightText: 'text-sky-800' },
  { name: 'blue', bg: 'bg-blue-500', text: 'text-blue-500', light: 'bg-blue-100', lightText: 'text-blue-800' },
  { name: 'indigo', bg: 'bg-indigo-500', text: 'text-indigo-500', light: 'bg-indigo-100', lightText: 'text-indigo-800' },
  { name: 'violet', bg: 'bg-violet-500', text: 'text-violet-500', light: 'bg-violet-100', lightText: 'text-violet-800' },
  { name: 'purple', bg: 'bg-purple-500', text: 'text-purple-500', light: 'bg-purple-100', lightText: 'text-purple-800' },
  { name: 'pink', bg: 'bg-pink-500', text: 'text-pink-500', light: 'bg-pink-100', lightText: 'text-pink-800' },
];

const ColorPicker = ({ selectedColor, onColorSelect, className }) => {
  return (
    <div className={`p-2 ${className}`}>
      {/* Remove color option */}
      <button
        onClick={() => onColorSelect(null)}
        className="w-full mb-2 px-2 py-1.5 text-sm flex items-center gap-2 rounded hover:bg-gray-100"
      >
        <X size={14} />
        Remove color
      </button>

      {/* Color grid - responsive for mobile */}
      <div className="grid grid-cols-4 sm:grid-cols-8 gap-1 max-h-[200px] overflow-y-auto">
        {colors.map((color) => (
          <button
            key={color.name}
            className={`
              relative p-1 rounded-md hover:bg-gray-100 
              focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-${color.name}-500
              ${selectedColor?.name === color.name ? 'ring-2 ring-offset-2 ring-gray-400' : ''}
            `}
            onClick={() => onColorSelect(color)}
            title={color.name}
          >
            <div className={`h-6 w-full rounded ${color.bg}`}>
              {selectedColor?.name === color.name && (
                <Check className="absolute inset-0 m-auto w-4 h-4 text-white" />
              )}
            </div>
          </button>
        ))}
      </div>
    </div>
  );
};

export default ColorPicker;
export { colors };

================
File: src/components/DroppableColumn.jsx
================
// src/components/DroppableColumn.jsx
import React, { useState } from 'react';
import { useDroppable } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { Settings } from 'lucide-react';
import SortableItem from './SortableItem';
import AddTaskForm from './AddTaskForm';
import ColorPicker, { colors } from './ColorPicker';

const DroppableColumn = ({ column, tasks, onAddTask, onUpdateTask, onUpdateColumn }) => {
  const [showColorPicker, setShowColorPicker] = useState(false);
  const { setNodeRef, isOver } = useDroppable({
    id: column.id
  });

  const handleColorSelect = (color) => {
    onUpdateColumn({
      ...column,
      color: color
    });
    setShowColorPicker(false);
  };

  return (
    <div 
      ref={setNodeRef}
      className="flex-shrink-0 w-80 bg-white rounded-lg shadow-md border border-gray-200"
    >
      <div className="p-4">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center gap-2">
            {column.color && (
              <div className={`w-3 h-3 rounded-full ${column.color.bg}`} />
            )}
            <h2 className="font-semibold text-gray-700">{column.title}</h2>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-500">
              {tasks.length} {tasks.length === 1 ? 'task' : 'tasks'}
            </span>
            <button
              onClick={() => setShowColorPicker(!showColorPicker)}
              className="p-1 hover:bg-gray-100 rounded"
            >
              <Settings size={16} className="text-gray-500" />
            </button>
          </div>
        </div>

        {showColorPicker && (
          <div className="mb-4">
            <ColorPicker
              selectedColor={column.color}
              onColorSelect={handleColorSelect}
              className="bg-gray-50 rounded-lg"
            />
          </div>
        )}
        
        <div className={`
          min-h-[100px]
          transition-all duration-200 ease-in-out
          ${isOver ? 'shadow-[inset_0_0_30px_rgba(0,0,0,0.05)] bg-gray-50 rounded-lg p-2' : ''}
        `}>
          <SortableContext 
            items={tasks.map(task => task.id)}
            strategy={verticalListSortingStrategy}
          >
            {tasks.map((task) => (
              <div key={task.id} className="mb-3">
                <SortableItem
                  id={task.id}
                  task={task}
                  onUpdateTask={onUpdateTask}
                  columnColor={column.color}
                />
              </div>
            ))}
          </SortableContext>
        </div>

        <div className="mt-3 pt-3 border-t border-gray-100">
          <AddTaskForm onAdd={(title) => onAddTask(column.id, title)} />
        </div>
      </div>
    </div>
  );
};

export default DroppableColumn;

================
File: src/components/EditableTitle.jsx
================
import React, { useState, useRef, useEffect } from 'react';

const EditableTitle = ({ title, onSave }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedTitle, setEditedTitle] = useState(title);
  const inputRef = useRef(null);

  useEffect(() => {
    if (isEditing) {
      inputRef.current.focus();
    }
  }, [isEditing]);

  const handleSave = () => {
    if (editedTitle.trim()) {
      onSave(editedTitle.trim());
      setIsEditing(false);
    }
  };

  return (
    <div className="editable-title">
      {isEditing ? (
        <input
          type="text"
          value={editedTitle}
          onChange={(e) => setEditedTitle(e.target.value)}
          onBlur={handleSave}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              handleSave();
            } else if (e.key === 'Escape') {
              setEditedTitle(title);
              setIsEditing(false);
            }
          }}
          ref={inputRef}
        />
      ) : (
        <h2 onClick={() => setIsEditing(true)}>{title}</h2>
      )}
    </div>
  );
};

export default EditableTitle;

================
File: src/components/ListView.jsx
================
import React, { useState, useMemo } from 'react';
import { 
  ChevronDown, 
  ChevronUp, 
  Calendar, 
  Tag, 
  Clock, 
  CheckSquare,
  ArrowUpDown,
  Filter,
  MoreHorizontal,
  Plus,
  ClipboardList
} from 'lucide-react';

const ListView = ({ projects, onUpdateProject }) => {
  const [sortBy, setSortBy] = useState('title');
  const [sortDirection, setSortDirection] = useState('asc');
  const [groupBy, setGroupBy] = useState('project');
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [addingTaskForProject, setAddingTaskForProject] = useState(null);

  const allTasks = useMemo(() => {
    return projects.flatMap(project =>
      project.columns.flatMap(column =>
        column.tasks.map(task => ({
          ...task,
          projectTitle: project.title,
          projectId: project.id,
          projectColor: project.color,
          mainStatus: column.title
        }))
      )
    );
  }, [projects]);

  const handleAddTask = (projectId) => {
    if (!newTaskTitle.trim()) return;

    const project = projects.find(p => p.id === projectId);
    if (!project) return;

    const firstColumn = project.columns[0];
    const newTask = {
      id: `task-${Date.now()}`,
      title: newTaskTitle.trim(),
      description: '',
      mainStatus: firstColumn.title,
      createdAt: new Date().toISOString(),
    };

    const updatedColumns = project.columns.map((col, index) => 
      index === 0 
        ? { ...col, tasks: [...col.tasks, newTask] }
        : col
    );

    onUpdateProject({
      ...project,
      columns: updatedColumns
    });

    setNewTaskTitle('');
    setAddingTaskForProject(null);
  };

  const handleSort = (field) => {
    if (sortBy === field) {
      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortDirection('asc');
    }
  };

  const handleStatusChange = (task, newStatus) => {
    const project = projects.find(p => p.id === task.projectId);
    if (!project) return;

    // Remove task from old column
    const updatedColumns = project.columns.map(col => ({
      ...col,
      tasks: col.tasks.filter(t => t.id !== task.id)
    }));

    // Add task to new column
    const targetColumn = updatedColumns.find(col => col.title === newStatus);
    if (targetColumn) {
      targetColumn.tasks.push({
        ...task,
        mainStatus: newStatus
      });
    }

    onUpdateProject({
      ...project,
      columns: updatedColumns
    });
  };

  const sortedTasks = [...allTasks].sort((a, b) => {
    let comparison = 0;
    switch (sortBy) {
      case 'title':
        comparison = a.title.localeCompare(b.title);
        break;
      case 'mainStatus':
        comparison = a.mainStatus.localeCompare(b.mainStatus);
        break;
      case 'dueDate':
        comparison = (a.dueDate || '').localeCompare(b.dueDate || '');
        break;
      default:
        comparison = 0;
    }
    return sortDirection === 'asc' ? comparison : -comparison;
  });

  const groupedTasks = useMemo(() => {
    if (groupBy !== 'project') {
      if (groupBy === 'none') return { 'All Tasks': sortedTasks };

      return sortedTasks.reduce((groups, task) => {
        let groupKey;
        switch (groupBy) {
          case 'status':
            groupKey = task.mainStatus;
            break;
          case 'dueDate':
            groupKey = task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'No Due Date';
            break;
          default:
            groupKey = 'Other';
        }

        if (!groups[groupKey]) {
          groups[groupKey] = [];
        }
        groups[groupKey].push(task);
        return groups;
      }, {});
    }

    // For project grouping, include all projects even if empty
    return projects.reduce((groups, project) => {
      groups[project.title] = sortedTasks.filter(task => task.projectId === project.id);
      return groups;
    }, {});
  }, [sortedTasks, groupBy, projects]);

  const availableStatuses = useMemo(() => {
    const statusSet = new Set();
    projects.forEach(project => {
      project.columns.forEach(column => {
        statusSet.add(column.title);
      });
    });
    return Array.from(statusSet);
  }, [projects]);

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow">
        <div className="p-4 flex flex-col sm:flex-row gap-4 items-start sm:items-center">
          <div className="flex items-center gap-2 w-full sm:w-auto">
            <Filter size={16} />
            <select 
              value={groupBy}
              onChange={(e) => setGroupBy(e.target.value)}
              className="border rounded px-2 py-1.5 flex-1 sm:flex-none"
            >
              <option value="project">Group by Project</option>
              <option value="status">Group by Status</option>
              <option value="dueDate">Group by Due Date</option>
              <option value="none">No Grouping</option>
            </select>
          </div>

          <div className="hidden sm:block h-6 w-px bg-gray-200" />

          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => handleSort('title')}
              className="flex items-center gap-1 px-3 py-1.5 hover:bg-gray-100 rounded text-sm"
            >
              <ArrowUpDown size={14} />
              Title
            </button>
            <button
              onClick={() => handleSort('dueDate')}
              className="flex items-center gap-1 px-3 py-1.5 hover:bg-gray-100 rounded text-sm"
            >
              <ArrowUpDown size={14} />
              Due Date
            </button>
            <button
              onClick={() => handleSort('mainStatus')}
              className="flex items-center gap-1 px-3 py-1.5 hover:bg-gray-100 rounded text-sm"
            >
              <ArrowUpDown size={14} />
              Status
            </button>
          </div>
        </div>
      </div>

      <div className="space-y-6">
        {Object.entries(groupedTasks).map(([group, tasks]) => {
          const project = projects.find(p => p.title === group);
          return (
            <div key={group} className="bg-white rounded-lg shadow relative overflow-hidden">
              {/* Color indicator line */}
              {project?.color && (
                <div 
                  className={`absolute left-0 top-0 bottom-0 w-1 ${project.color.bg}`}
                />
              )}
              
              <div className="p-4 border-b">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                  <div className="flex items-center gap-2">
                    <h2 className="text-lg font-semibold text-gray-800">{group}</h2>
                    <span className="px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded-full">
                      {tasks.length} tasks
                    </span>
                  </div>
                  <button
                    onClick={() => setAddingTaskForProject(project?.id)}
                    className="px-3 py-1.5 text-sm bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 flex items-center gap-2 w-full sm:w-auto justify-center"
                  >
                    <Plus size={16} />
                    Add Task
                  </button>
                </div>

                {addingTaskForProject === project?.id && (
                  <div className="mt-4 flex flex-col sm:flex-row gap-2">
                    <input
                      type="text"
                      value={newTaskTitle}
                      onChange={(e) => setNewTaskTitle(e.target.value)}
                      placeholder="Enter task title..."
                      className="flex-1 px-3 py-1.5 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      autoFocus
                    />
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleAddTask(project.id)}
                        className="px-3 py-1.5 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex-1 sm:flex-none"
                      >
                        Add
                      </button>
                      <button
                        onClick={() => {
                          setAddingTaskForProject(null);
                          setNewTaskTitle('');
                        }}
                        className="px-3 py-1.5 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 flex-1 sm:flex-none"
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                )}
              </div>

              <div className="divide-y">
                {tasks.length > 0 ? (
                  tasks.map(task => (
                    <div key={task.id} className="flex flex-col sm:flex-row sm:items-center gap-4 p-4 hover:bg-gray-50">
                      <div className="flex-1">
                        <div className="font-medium">{task.title}</div>
                        <div className="text-sm text-gray-500">
                          {task.mainStatus}
                        </div>
                      </div>

                      <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600">
                        {task.dueDate && (
                          <div className="flex items-center gap-1">
                            <Calendar size={16} />
                            {new Date(task.dueDate).toLocaleDateString()}
                          </div>
                        )}

                        {task.tags?.length > 0 && (
                          <div className="flex flex-wrap gap-1">
                            {task.tags.map(tag => (
                              <span key={tag} className="px-2 py-1 bg-gray-100 rounded-full text-xs">
                                {tag}
                              </span>
                            ))}
                          </div>
                        )}

                        <select
                          value={task.mainStatus}
                          onChange={(e) => handleStatusChange(task, e.target.value)}
                          className="px-2 py-1 border rounded-lg text-sm w-full sm:w-auto"
                        >
                          {availableStatuses.map(status => (
                            <option key={status} value={status}>
                              {status}
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="p-8 text-center text-gray-500">
                    <ClipboardList size={24} className="mx-auto mb-2" />
                    <p>No tasks yet</p>
                    <button
                      onClick={() => setAddingTaskForProject(project?.id)}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-700"
                    >
                      Add your first task
                    </button>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default ListView;

================
File: src/components/ProjectRow.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { DndContext, MouseSensor, TouchSensor, useSensor, useSensors, DragOverlay } from '@dnd-kit/core';
import { arrayMove } from '@dnd-kit/sortable';
import { Plus, MoreVertical, Pencil, Trash, Palette } from 'lucide-react';
import DroppableColumn from './DroppableColumn';
import AddColumnForm from './AddColumnForm';
import ColorPicker from './ColorPicker';

const ProjectRow = ({ project, onUpdateProject, onDeleteProject, onUpdateColumn }) => {
  const [isAddingColumn, setIsAddingColumn] = useState(false);
  const [activeTask, setActiveTask] = useState(null);
  const [showOptions, setShowOptions] = useState(false);
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [editedTitle, setEditedTitle] = useState(project.title);
  const [isPickingColor, setIsPickingColor] = useState(false);
  const titleInputRef = useRef(null);

  const sensors = useSensors(
    useSensor(MouseSensor, {
      activationConstraint: { distance: 5 },
    }),
    useSensor(TouchSensor, {
      activationConstraint: {
        delay: 100,
        tolerance: 5,
      },
    })
  );

  useEffect(() => {
    if (isEditingTitle && titleInputRef.current) {
      titleInputRef.current.focus();
      titleInputRef.current.select();
    }
  }, [isEditingTitle]);

  const handleTitleSubmit = () => {
    if (editedTitle.trim() && editedTitle !== project.title) {
      onUpdateProject({
        ...project,
        title: editedTitle.trim()
      });
    } else {
      setEditedTitle(project.title);
    }
    setIsEditingTitle(false);
  };

  const handleColorSelect = (color) => {
    onUpdateProject({
      ...project,
      color: color
    });
    setIsPickingColor(false);
    setShowOptions(false);
  };

  const findColumnByTaskId = (taskId) => {
    return project.columns.find(column => 
      column.tasks.some(task => task.id === taskId)
    );
  };

  const handleDragStart = (event) => {
    const { active } = event;
    const activeColumn = findColumnByTaskId(active.id);
    const activeTaskData = activeColumn?.tasks.find(task => task.id === active.id);
    setActiveTask(activeTaskData);
  };

  const handleDragEnd = (event) => {
    const { active, over } = event;
    
    if (!over) {
      setActiveTask(null);
      return;
    }

    const activeColumn = findColumnByTaskId(active.id);
    if (!activeColumn) return;

    const activeTaskData = activeColumn.tasks.find(task => task.id === active.id);
    if (!activeTaskData) return;

    const overColumn = project.columns.find(col => col.id === over.id) || 
                      findColumnByTaskId(over.id);

    if (!overColumn) {
      setActiveTask(null);
      return;
    }

    if (activeColumn.id !== overColumn.id) {
      const updatedTaskData = {
        ...activeTaskData,
        mainStatus: overColumn.title
      };

      const updatedColumns = project.columns.map(col => {
        if (col.id === activeColumn.id) {
          return {
            ...col,
            tasks: col.tasks.filter(task => task.id !== active.id)
          };
        }
        if (col.id === overColumn.id) {
          const overTaskIndex = col.tasks.findIndex(task => task.id === over.id);
          const newTasks = [...col.tasks];
          
          if (overTaskIndex >= 0) {
            newTasks.splice(overTaskIndex, 0, updatedTaskData);
          } else {
            newTasks.push(updatedTaskData);
          }
          
          return {
            ...col,
            tasks: newTasks
          };
        }
        return col;
      });

      onUpdateProject({
        ...project,
        columns: updatedColumns
      });
    } else {
      const oldIndex = activeColumn.tasks.findIndex(task => task.id === active.id);
      const newIndex = activeColumn.tasks.findIndex(task => task.id === over.id);

      if (oldIndex !== newIndex) {
        const updatedColumns = project.columns.map(col => {
          if (col.id === activeColumn.id) {
            return {
              ...col,
              tasks: arrayMove(col.tasks, oldIndex, newIndex)
            };
          }
          return col;
        });

        onUpdateProject({
          ...project,
          columns: updatedColumns
        });
      }
    }

    setActiveTask(null);
  };

  const handleAddTask = (columnId, taskTitle) => {
    const column = project.columns.find(col => col.id === columnId);
    const newTask = {
      id: `task-${Date.now()}`,
      title: taskTitle,
      description: '',
      dueDate: '',
      startDate: '',
      mainStatus: column.title,
      tags: [],
      createdAt: new Date().toISOString(),
    };

    const updatedColumns = project.columns.map(col =>
      col.id === columnId
        ? { ...col, tasks: [...col.tasks, newTask] }
        : col
    );

    onUpdateProject({
      ...project,
      columns: updatedColumns
    });
  };

  const handleUpdateTask = (updatedTask) => {
    const updatedColumns = project.columns.map(column => ({
      ...column,
      tasks: updatedTask.isDeleted
        ? column.tasks.filter(task => task.id !== updatedTask.id)
        : column.tasks.map(task =>
            task.id === updatedTask.id ? updatedTask : task
          )
    }));

    onUpdateProject({
      ...project,
      columns: updatedColumns
    });
  };

  return (
    <div className="mb-8 last:mb-0">
      <div className="flex justify-between items-center mb-4 bg-white p-4 rounded-lg shadow-sm relative overflow-hidden">
        {/* Color indicator line */}
        {project.color && (
          <div 
            className={`absolute left-0 top-0 bottom-0 w-1 ${project.color.bg}`}
          />
        )}
        
        <div className="flex items-center gap-4 pl-3">
          {isEditingTitle ? (
            <input
              ref={titleInputRef}
              type="text"
              value={editedTitle}
              onChange={(e) => setEditedTitle(e.target.value)}
              onBlur={handleTitleSubmit}
              onKeyDown={(e) => {
                if (e.key === 'Enter') handleTitleSubmit();
                if (e.key === 'Escape') {
                  setEditedTitle(project.title);
                  setIsEditingTitle(false);
                }
              }}
              className="text-xl font-bold px-2 py-1 border rounded focus:outline-none focus:border-blue-500 bg-white"
            />
          ) : (
            <h2 
              className="text-xl font-bold text-gray-800 cursor-pointer hover:text-gray-600"
              onDoubleClick={() => {
                setIsEditingTitle(true);
                setEditedTitle(project.title);
              }}
            >
              {project.title}
            </h2>
          )}
          <span className="px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded-full">
            {project.columns.reduce((total, column) => total + column.tasks.length, 0)} tasks
          </span>
        </div>
        
        <div className="relative">
          <button
            onClick={() => setShowOptions(!showOptions)}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <MoreVertical size={20} className="text-gray-600" />
          </button>
          
          {showOptions && (
            <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border py-1">
              <button
                onClick={() => {
                  setIsEditingTitle(true);
                  setEditedTitle(project.title);
                  setShowOptions(false);
                }}
                className="w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"
              >
                <Pencil size={14} />
                Edit Title
              </button>
              <button
                onClick={() => setIsPickingColor(true)}
                className="w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"
              >
                <Palette size={14} />
                Change Color
              </button>
              <button
                onClick={() => {
                  onDeleteProject(project.id);
                  setShowOptions(false);
                }}
                className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center gap-2"
              >
                <Trash size={14} />
                Delete Project
              </button>
            </div>
          )}

          {isPickingColor && (
            <div 
              className="absolute right-0 mt-2 bg-white rounded-lg shadow-lg z-10 border"
              onClick={e => e.stopPropagation()}
            >
              <ColorPicker
                selectedColor={project.color}
                onColorSelect={(color) => {
                  handleColorSelect(color);
                  setIsPickingColor(false);
                }}
              />
            </div>
          )}
        </div>
      </div>

      <DndContext 
        sensors={sensors}
        onDragStart={handleDragStart}
        onDragEnd={handleDragEnd}
      >
        <div className="flex gap-6 overflow-x-auto pb-4">
          {project.columns.map((column) => (
            <DroppableColumn
              key={column.id}
              column={column}
              tasks={column.tasks}
              onAddTask={handleAddTask}
              onUpdateTask={handleUpdateTask}
              onUpdateColumn={onUpdateColumn}
            />
          ))}

          {isAddingColumn ? (
            <div className="flex-shrink-0 w-72 bg-white rounded-lg shadow-md border border-gray-200 p-4">
              <AddColumnForm 
                onAdd={(title) => {
                  const updatedColumns = [...project.columns, { 
                    id: `col-${Date.now()}`, 
                    title, 
                    tasks: [] 
                  }];
                  onUpdateProject({
                    ...project,
                    columns: updatedColumns
                  });
                  setIsAddingColumn(false);
                }}
                onCancel={() => setIsAddingColumn(false)}
              />
            </div>
          ) : (
            <button
              onClick={() => setIsAddingColumn(true)}
              className="flex-shrink-0 w-10 h-10 bg-white rounded-lg shadow-md border border-gray-200 flex items-center justify-center hover:bg-gray-50 transition-colors"
              title="Add Column"
            >
              <Plus size={20} className="text-gray-600" />
            </button>
          )}
        </div>

        <DragOverlay>
          {activeTask ? (
            <div className="bg-white p-3 rounded shadow-lg w-80 opacity-90">
              {activeTask.title}
            </div>
          ) : null}
        </DragOverlay>
      </DndContext>
    </div>
  );
};

export default ProjectRow;

================
File: src/components/SideMenu.jsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { 
  LayoutGrid, 
  ListTodo, 
  Calendar, 
  Star, 
  Clock,
  Filter,
  ChevronDown,
  Tags,
  GripVertical,
  Sparkles // We'll use this with our unicorn
} from 'lucide-react';

const MIN_WIDTH = 200;
const MAX_WIDTH = 400;
const DEFAULT_WIDTH = 240;

const SideMenu = ({ view, onViewChange, isCollapsed, onToggleCollapse }) => {
  const [width, setWidth] = useState(DEFAULT_WIDTH);
  const [isResizing, setIsResizing] = useState(false);

  const menuItems = [
    {
      group: "Views",
      items: [
        { id: 'board', icon: <LayoutGrid size={18} />, label: 'Board View' },
        { id: 'list', icon: <ListTodo size={18} />, label: 'List View' },
        { id: 'calendar', icon: <Calendar size={18} />, label: 'Calendar' },
      ]
    },
    {
      group: "Filters",
      items: [
        { id: 'starred', icon: <Star size={18} />, label: 'Starred' },
        { id: 'recent', icon: <Clock size={18} />, label: 'Recent' },
        { id: 'tags', icon: <Tags size={18} />, label: 'Tags' },
      ]
    }
  ];

  const handleMouseDown = (e) => {
    e.preventDefault();
    setIsResizing(true);
  };

  const handleMouseMove = useCallback((e) => {
    if (isResizing) {
      const newWidth = e.clientX;
      if (newWidth >= MIN_WIDTH && newWidth <= MAX_WIDTH) {
        setWidth(newWidth);
      }
    }
  }, [isResizing]);

  const handleMouseUp = useCallback(() => {
    setIsResizing(false);
  }, []);

  useEffect(() => {
    if (isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isResizing, handleMouseMove, handleMouseUp]);

  return (
    <div 
      style={{ width: isCollapsed ? 64 : width }}
      className={`relative h-screen bg-gray-50 border-r border-gray-200 transition-all duration-300 ease-in-out ${isResizing ? 'select-none' : ''} flex flex-col`}
    >
      <div className="flex-1 p-4">
        <button
          onClick={onToggleCollapse}
          className="w-full flex items-center gap-2 p-2 hover:bg-gray-100 rounded-lg mb-4"
        >
          <Filter size={18} />
          {!isCollapsed && (
            <>
              <span className="flex-1 text-left">Views & Filters</span>
              <ChevronDown size={16} />
            </>
          )}
        </button>

        {menuItems.map((group) => (
          <div key={group.group} className="mb-6">
            {!isCollapsed && (
              <h3 className="text-sm font-semibold text-gray-500 mb-2 px-2">
                {group.group}
              </h3>
            )}
            {group.items.map((item) => (
              <button
                key={item.id}
                onClick={() => onViewChange(item.id)}
                className={`
                  w-full flex items-center gap-3 p-2 rounded-lg mb-1
                  ${view === item.id 
                    ? 'bg-blue-50 text-blue-600' 
                    : 'hover:bg-gray-100 text-gray-700'
                  }
                `}
              >
                {item.icon}
                {!isCollapsed && <span>{item.label}</span>}
              </button>
            ))}
          </div>
        ))}
      </div>

      {/* Unicorn section at bottom */}
      <div className={`p-4 border-t border-gray-200 flex items-center justify-center ${isCollapsed ? 'gap-0' : 'gap-2'}`}>
        {!isCollapsed && <span className="text-sm text-gray-600">Made by Max</span>}
        <Sparkles size={16} className="text-yellow-500" />
      </div>

      {/* Resize Handle */}
      {!isCollapsed && (
        <div
          className="absolute top-0 right-0 w-1 h-full cursor-col-resize group"
          onMouseDown={handleMouseDown}
        >
          <div className="absolute top-0 right-0 w-4 h-full -mr-2 flex items-center justify-center opacity-0 group-hover:opacity-100">
            <div className="w-1 h-8 bg-gray-300 rounded" />
          </div>
        </div>
      )}
    </div>
  );
};

export default SideMenu;

================
File: src/components/SortableItem.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { ExternalLink, GripVertical, Trash, Link, Copy, Archive, Check, Undo } from 'lucide-react';

const NOTIFICATION_DURATION = 5000; // 5 seconds

const SortableItem = ({ id, task, onUpdateTask }) => {
  const [showDialog, setShowDialog] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editedTitle, setEditedTitle] = useState(task.title);
  const [contextMenu, setContextMenu] = useState(null);
  const [notification, setNotification] = useState(null);
  const [notificationProgress, setNotificationProgress] = useState(100);
  const inputRef = useRef(null);
  const deleteTimeoutRef = useRef(null);
  const progressIntervalRef = useRef(null);
  
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging
  } = useSortable({ id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();
    }
  }, [isEditing]);

  useEffect(() => {
    const handleClickOutside = () => setContextMenu(null);
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, []);

  useEffect(() => {
    if (notification) {
      if (deleteTimeoutRef.current) {
        clearTimeout(deleteTimeoutRef.current);
      }
      
      const timer = setTimeout(() => {
        setNotification(null);
        if (notification.type === 'delete' && !notification.undone) {
          onUpdateTask({ ...task, isDeleted: true });
        }
      }, NOTIFICATION_DURATION);

      deleteTimeoutRef.current = timer;
      return () => clearTimeout(timer);
    }
  }, [notification]);

  useEffect(() => {
    if (notification?.type === 'delete' && !notification.undone) {
      setNotificationProgress(100);
      const startTime = Date.now();
      const interval = 10; // Update every 10ms for smooth animation

      progressIntervalRef.current = setInterval(() => {
        const elapsedTime = Date.now() - startTime;
        const progress = 100 - (elapsedTime / NOTIFICATION_DURATION) * 100;
        
        if (progress <= 0) {
          clearInterval(progressIntervalRef.current);
        } else {
          setNotificationProgress(progress);
        }
      }, interval);

      return () => {
        if (progressIntervalRef.current) {
          clearInterval(progressIntervalRef.current);
        }
      };
    }
  }, [notification]);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(task.title);
      setNotification({ type: 'copy', message: 'Copied to clipboard' });
    } catch (err) {
      console.error('Failed to copy text:', err);
    }
    setContextMenu(null);
  };

  const handleDelete = () => {
    setNotification({ 
      type: 'delete', 
      message: 'Task deleted', 
      undone: false,
      task: { ...task }
    });
    setContextMenu(null);
  };

  const handleUndo = () => {
    if (notification?.type === 'delete') {
      setNotification(prev => ({ ...prev, undone: true }));
      clearTimeout(deleteTimeoutRef.current);
      clearInterval(progressIntervalRef.current);
      setTimeout(() => setNotification(null), 1000);
    }
  };

  const handleContextMenu = (e) => {
    e.preventDefault();
    setContextMenu({
      x: e.pageX,
      y: e.pageY,
    });
  };

  const handleDoubleClick = (e) => {
    e.preventDefault();
    setIsEditing(true);
  };

  const handleSubmit = () => {
    if (editedTitle.trim()) {
      onUpdateTask({
        ...task,
        title: editedTitle.trim()
      });
      setIsEditing(false);
    }
  };

  return (
    <>
      <div
        ref={setNodeRef}
        style={style}
        className={`bg-white p-3 rounded shadow group hover:bg-gray-50 ${isDragging ? 'shadow-lg' : ''}`}
        onContextMenu={handleContextMenu}
      >
        <div className="flex items-center gap-2">
          <div 
            {...attributes} 
            {...listeners}
            className="cursor-grab hover:bg-gray-100 rounded p-1"
          >
            <GripVertical size={16} className="text-gray-400" />
          </div>

          {isEditing ? (
            <input
              ref={inputRef}
              type="text"
              value={editedTitle}
              onChange={(e) => setEditedTitle(e.target.value)}
              onBlur={handleSubmit}
              onKeyDown={(e) => {
                if (e.key === 'Enter') handleSubmit();
                if (e.key === 'Escape') {
                  setEditedTitle(task.title);
                  setIsEditing(false);
                }
              }}
              className="flex-1 px-1 border rounded focus:outline-none focus:border-blue-500"
            />
          ) : (
            <span 
              className="flex-1 select-none"
              onDoubleClick={handleDoubleClick}
            >
              {task.title}
            </span>
          )}

          <button
            type="button"
            onClick={() => setShowDialog(true)}
            className="p-1 hover:bg-gray-100 rounded"
          >
            <ExternalLink size={16} className="text-gray-500" />
          </button>
        </div>
      </div>

      {/* Notification Toast */}
      {notification && (
        <div className="fixed bottom-4 right-4 bg-gray-800 text-white rounded-lg shadow-lg z-50 overflow-hidden">
          <div className="px-4 py-2 flex items-center gap-2">
            {notification.type === 'copy' ? (
              <>
                <Check size={16} />
                {notification.message}
              </>
            ) : notification.type === 'delete' && !notification.undone ? (
              <>
                <span className="flex items-center gap-2">
                  <Trash size={16} />
                  {notification.message}
                </span>
                <button
                  onClick={handleUndo}
                  className="ml-4 px-2 py-1 bg-gray-700 rounded hover:bg-gray-600 flex items-center gap-1"
                >
                  <Undo size={14} />
                  Undo
                </button>
              </>
            ) : null}
          </div>
          
          {/* Progress Bar */}
          {notification?.type === 'delete' && !notification.undone && (
            <div className="h-1 w-full bg-gray-700">
              <div 
                className="h-full bg-blue-500 transition-all duration-100 ease-linear"
                style={{ width: `${notificationProgress}%` }}
              />
            </div>
          )}
        </div>
      )}

      {/* Context Menu */}
      {contextMenu && (
        <div
          className="fixed bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50"
          style={{
            top: contextMenu.y,
            left: contextMenu.x,
          }}
          onClick={(e) => e.stopPropagation()}
        >
          <button
            className="w-full px-4 py-2 text-sm text-left hover:bg-gray-100 flex items-center gap-2"
            onClick={handleCopy}
          >
            <Copy size={14} />
            Copy
          </button>
          <button
            className="w-full px-4 py-2 text-sm text-left hover:bg-gray-100 flex items-center gap-2"
            onClick={() => {
              setContextMenu(null);
            }}
          >
            <Link size={14} />
            Create Link
          </button>
          <button
            className="w-full px-4 py-2 text-sm text-left hover:bg-gray-100 flex items-center gap-2"
            onClick={() => {
              onUpdateTask({ ...task, isArchived: true });
              setContextMenu(null);
            }}
          >
            <Archive size={14} />
            Archive
          </button>
          <div className="border-t border-gray-200 my-1" />
          <button
            className="w-full px-4 py-2 text-sm text-left hover:bg-gray-100 flex items-center gap-2 text-red-600"
            onClick={handleDelete}
          >
            <Trash size={14} />
            Delete
          </button>
        </div>
      )}

      {/* Task Dialog Modal */}
      {showDialog && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        >
          <div 
            className="bg-white rounded-lg w-full max-w-lg p-6"
            onClick={e => e.stopPropagation()}
          >
            <h2 className="text-lg font-bold mb-4">{task.title}</h2>
            
            <div className="mb-4">
              <label className="block text-sm font-medium mb-1">Description</label>
              <textarea
                className="w-full p-2 border rounded"
                rows="3"
                placeholder="Add a description..."
                value={task.description || ''}
                onChange={(e) => {
                  onUpdateTask({
                    ...task,
                    description: e.target.value
                  });
                }}
              />
            </div>

            <div className="flex justify-end gap-2">
              <button 
                onClick={() => setShowDialog(false)}
                className="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default SortableItem;

================
File: src/components/TaskDialog.jsx
================
import React, { useState, useEffect } from 'react';
import { Calendar, Clock, Tag, CheckSquare, X } from 'lucide-react';

const TaskDialog = ({ task, isOpen, onClose, onUpdate }) => {
  const [description, setDescription] = useState(task?.description || '');
  const [dueDate, setDueDate] = useState(task?.dueDate || '');
  const [startDate, setStartDate] = useState(task?.startDate || '');
  const [status, setStatus] = useState(task?.status || 'Not Started');
  const [tags, setTags] = useState(task?.tags || []);
  const [newTag, setNewTag] = useState('');

  useEffect(() => {
    if (task) {
      setDescription(task.description || '');
      setDueDate(task.dueDate || '');
      setStartDate(task.startDate || '');
      setStatus(task.status || 'Not Started');
      setTags(task.tags || []);
    }
  }, [task]);

  if (!isOpen) return null;

  const handleSave = () => {
    onUpdate({
      ...task,
      description,
      dueDate,
      startDate,
      status,
      tags
    });
  };

  const handleAddTag = (e) => {
    e.preventDefault();
    if (newTag.trim()) {
      setTags([...tags, newTag.trim()]);
      setNewTag('');
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const statusOptions = ['Not Started', 'In Progress', 'Blocked', 'Completed'];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl">
        {/* Header */}
        <div className="p-4 border-b flex justify-between items-center">
          <h2 className="text-xl font-semibold">{task?.title}</h2>
          <button 
            onClick={onClose}
            className="p-1 hover:bg-gray-100 rounded"
          >
            <X size={20} />
          </button>
        </div>

        {/* Content */}
        <div className="p-4">
          <div className="grid grid-cols-3 gap-4">
            {/* Left column - Description */}
            <div className="col-span-2">
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Description</label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  className="w-full h-32 p-2 border rounded-md"
                  placeholder="Add a more detailed description..."
                />
              </div>
            </div>

            {/* Right column - Metadata */}
            <div className="space-y-4">
              {/* Due Date */}
              <div>
                <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                  <Calendar size={16} />
                  Due Date
                </label>
                <input
                  type="date"
                  value={dueDate}
                  onChange={(e) => setDueDate(e.target.value)}
                  className="w-full p-2 border rounded-md"
                />
              </div>

              {/* Start Date */}
              <div>
                <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                  <Clock size={16} />
                  Start Date
                </label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full p-2 border rounded-md"
                />
              </div>

              {/* Status */}
              <div>
                <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                  <CheckSquare size={16} />
                  Status
                </label>
                <select
                  value={status}
                  onChange={(e) => setStatus(e.target.value)}
                  className="w-full p-2 border rounded-md"
                >
                  {statusOptions.map(option => (
                    <option key={option} value={option}>{option}</option>
                  ))}
                </select>
              </div>

              {/* Tags */}
              <div>
                <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                  <Tag size={16} />
                  Tags
                </label>
                <form onSubmit={handleAddTag} className="flex gap-2 mb-2">
                  <input
                    type="text"
                    value={newTag}
                    onChange={(e) => setNewTag(e.target.value)}
                    className="flex-1 p-2 border rounded-md"
                    placeholder="Add tag..."
                  />
                  <button
                    type="submit"
                    className="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                  >
                    Add
                  </button>
                </form>
                <div className="flex flex-wrap gap-2">
                  {tags.map((tag, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-gray-100 rounded-full text-sm flex items-center gap-1"
                    >
                      {tag}
                      <button
                        onClick={() => handleRemoveTag(tag)}
                        className="text-gray-500 hover:text-gray-700"
                      >
                        ×
                      </button>
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="p-4 border-t flex justify-end gap-2">
          <button
            onClick={onClose}
            className="px-4 py-2 border rounded hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            onClick={handleSave}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

export default TaskDialog;

================
File: src/components/TrelloClone.jsx
================
import React, { useState, useEffect } from 'react';
import { Plus, Search, Palette } from 'lucide-react';
import ProjectRow from './ProjectRow';
import SideMenu from './SideMenu';
import ListView from './ListView';
import { loadState, saveState } from '../utils/storage';
import { colors } from './ColorPicker';

const defaultProject = {
  id: 'default',
  title: 'Main Project',
  color: {
    name: 'blue',
    bg: 'bg-blue-500',
    text: 'text-blue-500',
    light: 'bg-blue-100',
    lightText: 'text-blue-800'
  },
  columns: [
    { id: 'todo', title: 'To Do', tasks: [] },
    { id: 'inProgress', title: 'In Progress', tasks: [] },
    { id: 'done', title: 'Done', tasks: [] },
  ]
};

const TrelloClone = () => {
  const [projects, setProjects] = useState(() => {
    const savedState = loadState();
    return savedState?.projects || [defaultProject];
  });
  
  const [isAddingProject, setIsAddingProject] = useState(false);
  const [newProjectTitle, setNewProjectTitle] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [currentView, setCurrentView] = useState('board');
  const [isMenuCollapsed, setIsMenuCollapsed] = useState(false);

  useEffect(() => {
    saveState({ projects });
  }, [projects]);

  const handleAddProject = (e) => {
    e.preventDefault();
    if (newProjectTitle.trim()) {
      const newProject = {
        id: `project-${Date.now()}`,
        title: newProjectTitle.trim(),
        color: {
          name: 'blue',
          bg: 'bg-blue-500',
          text: 'text-blue-500',
          light: 'bg-blue-100',
          lightText: 'text-blue-800'
        },
        columns: [
          { id: `todo-${Date.now()}`, title: 'To Do', tasks: [] },
          { id: `progress-${Date.now()}`, title: 'In Progress', tasks: [] },
          { id: `done-${Date.now()}`, title: 'Done', tasks: [] },
        ]
      };
      setProjects([...projects, newProject]);
      setNewProjectTitle('');
      setIsAddingProject(false);
    }
  };

  const handleUpdateProject = (updatedProject) => {
    setProjects(projects.map(project =>
      project.id === updatedProject.id ? updatedProject : project
    ));
  };

  const handleDeleteProject = (projectId) => {
    if (projects.length > 1) {
      setProjects(projects.filter(project => project.id !== projectId));
    }
  };

  const handleUpdateColumn = (projectId, updatedColumn) => {
    setProjects(projects.map(project => 
      project.id === projectId
        ? {
            ...project,
            columns: project.columns.map(col =>
              col.id === updatedColumn.id ? updatedColumn : col
            )
          }
        : project
    ));
  };

  const filteredProjects = searchQuery
    ? projects.filter(project => {
        if (project.title.toLowerCase().includes(searchQuery.toLowerCase())) {
          return true;
        }
        return project.columns.some(column =>
          column.tasks.some(task =>
            task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
            task.description?.toLowerCase().includes(searchQuery.toLowerCase())
          )
        );
      })
    : projects;

    return (
      <div className="flex h-screen overflow-hidden">
        <SideMenu
          view={currentView}
          onViewChange={setCurrentView}
          isCollapsed={isMenuCollapsed}
          onToggleCollapse={() => setIsMenuCollapsed(!isMenuCollapsed)}
        />
        
        <div className="flex-1 overflow-x-hidden overflow-y-auto">
          <div className="p-4">
            {/* Header Section */}
            <div className="mb-8">
              <div className="flex justify-between items-center mb-4">
                <h1 className="text-2xl font-bold text-gray-800">
                  {currentView === 'board' && 'Project Board'}
                  {currentView === 'list' && 'List View'}
                  {currentView === 'calendar' && 'Calendar View'}
                  {currentView === 'starred' && 'Starred Items'}
                  {currentView === 'recent' && 'Recent Items'}
                  {currentView === 'tags' && 'Tags View'}
                </h1>
                <div className="flex gap-4">
                  {!isAddingProject && (
                    <button
                      onClick={() => setIsAddingProject(true)}
                      className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center gap-2"
                    >
                      <Plus size={20} />
                      New Project
                    </button>
                  )}
                </div>
              </div>
  
              {/* Search Bar */}
              <div className="relative">
                <Search size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search projects and tasks..."
                  className="w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
  
            {/* New Project Form */}
            {isAddingProject && (
              <div className="mb-8 bg-white p-4 rounded-lg shadow-sm">
                <form onSubmit={handleAddProject}>
                  <h3 className="text-lg font-semibold mb-4">Create New Project</h3>
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={newProjectTitle}
                      onChange={(e) => setNewProjectTitle(e.target.value)}
                      placeholder="Enter project title..."
                      className="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      autoFocus
                    />
                    <button
                      type="submit"
                      className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                    >
                      Add Project
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setIsAddingProject(false);
                        setNewProjectTitle('');
                      }}
                      className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            )}
  
            {/* Views */}
            {currentView === 'board' && (
              <div className="space-y-8">
                {filteredProjects.map(project => (
                  <ProjectRow
                    key={project.id}
                    project={project}
                    onUpdateProject={handleUpdateProject}
                    onDeleteProject={handleDeleteProject}
                    onUpdateColumn={(updatedColumn) => handleUpdateColumn(project.id, updatedColumn)}
                  />
                ))}
              </div>
            )}
  
            {currentView === 'list' && (
              <ListView 
                projects={filteredProjects}
                onUpdateProject={handleUpdateProject}
              />
            )}
  
            {currentView === 'calendar' && (
              <div className="bg-white rounded-lg shadow p-4">
                <p className="text-gray-500">Calendar view coming soon...</p>
              </div>
            )}
  
            {currentView === 'starred' && (
              <div className="bg-white rounded-lg shadow p-4">
                <p className="text-gray-500">Starred items view coming soon...</p>
              </div>
            )}
  
            {currentView === 'recent' && (
              <div className="bg-white rounded-lg shadow p-4">
                <p className="text-gray-500">Recent items view coming soon...</p>
              </div>
            )}
  
            {currentView === 'tags' && (
              <div className="bg-white rounded-lg shadow p-4">
                <p className="text-gray-500">Tags view coming soon...</p>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };
  
  export default TrelloClone;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/index.jsx
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

const root = createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/utils/storage.js
================
const STORAGE_KEY = 'trelloCloneState';

export const saveState = (state) => {
  try {
    const serializedState = JSON.stringify(state);
    localStorage.setItem(STORAGE_KEY, serializedState);
  } catch (error) {
    console.error('Error saving state to localStorage:', error);
  }
};

export const loadState = () => {
  try {
    const serializedState = localStorage.getItem(STORAGE_KEY);
    if (serializedState === null) {
      return undefined;
    }
    return JSON.parse(serializedState);
  } catch (error) {
    console.error('Error loading state from localStorage:', error);
    return undefined;
  }
};

================
File: tailwind.config.cjs
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: trello-clone/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: trello-clone/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: trello-clone/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: trello-clone/package.json
================
{
  "name": "trello-clone",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.1.0",
    "@dnd-kit/sortable": "^8.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "lucide-react": "^0.454.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hotkeys-hook": "^4.6.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "vite": "^5.4.10"
  }
}

================
File: trello-clone/public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: trello-clone/README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: trello-clone/src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: trello-clone/src/App.jsx
================
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App

================
File: trello-clone/src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: trello-clone/src/index.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: trello-clone/src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: trello-clone/trello-clone/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: trello-clone/trello-clone/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: trello-clone/trello-clone/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: trello-clone/trello-clone/package.json
================
{
  "name": "trello-clone",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.1.0",
    "@dnd-kit/sortable": "^8.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "lucide-react": "^0.454.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hotkeys-hook": "^4.6.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "vite": "^5.4.10"
  }
}

================
File: trello-clone/trello-clone/postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: trello-clone/trello-clone/public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: trello-clone/trello-clone/README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: trello-clone/trello-clone/src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: trello-clone/trello-clone/src/App.jsx
================
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App

================
File: trello-clone/trello-clone/src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: trello-clone/trello-clone/src/index.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: trello-clone/trello-clone/src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: trello-clone/trello-clone/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: trello-clone/trello-clone/vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

================
File: trello-clone/vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { fileURLToPath } from 'url'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})
